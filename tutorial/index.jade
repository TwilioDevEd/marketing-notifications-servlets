.step(data-title='Introduction',
      data-file='src/main/webapp/WEB-INF/web.xml',
      data-format='xml')
  :markdown
    ## SMS and MMS Marketing Notifications

    Ready to implement SMS and MMS marketing notifications? Here's how it works
    at a high level:

    1. A possible customer sends an SMS to a Twilio phone number you advertise
       either online, on printed propaganda or on TV advertising.

    2. Your application confirms that the user wants to receive SMS and MMS
       notifications from your application.

    3. An administrator or marketing campaign manager uses a web form to craft a
       message that will go out to all subscribers via SMS/MMS message.

    ## Building Blocks

    To get this done, you'll be working with the following tools:

    * [TwiML](//www.local.twilio.com/docs/api/twiml) and the [<Message>
    Verb](/docs/api/twiml/sms/message): We'll use TwiML to manage interactions
    initiated by the user via SMS.

    * [Messages Resource](/docs/api/rest/sending-sms): We will use the REST API
    to broadcast messages out to all subscribers.

    Let's get started! Click the right arrow to move on to the next step of the
    tutorial.

.step(
  data-title='Subscriber',
  data-file='src/main/java/org/twilio/smsmarketing/models/Subscriber.java')
  :markdown
    ## Subscriber

    In order to send out marketing notifications to a subscriber, we need to
    provide the right information to our app.

    * The `phoneNumber` allows the application to know where to send the
    notifications.

    * `subscribed` lets the application identify which subscribers are
    active, only an active subscriber will receive notifications.

    **See Also**
    * [Database Migrations with Flyway](http://flywaydb.org/)

.step(
  data-title='Handling Incoming Messages',
  data-file='src/main/java/org/twilio/smsmarketing/TwilioServlet.java'
  data-highlight='38-44')
  :markdown
    ## Handling Incoming messages

    This is the endpoint that will be called every time our application receives
    a message.

    We begin by getting the user's phone number from the incoming [Twilio
    request](/docs/api/twiml/sms/twilio_request). Now, we need to find a
    `Subscriber` model with that phone number.

    If there's no subscriber with this phone number, we create one, save it,
    and respond with a message asking them to send an SMS with "add" on it. This
    is done to confirm that they want to receive messages from us.

    We've created a `Subscriber` model to keep track of the people that want
    our messages, and  save them in the database when they text us for the first time.

    **See Also:**
    * [Twilio TwiML](//www.twilio.com/docs/quickstart/java/twiml)

.step(
  data-title='Manage Subscriptions',
  data-file='src/main/java/org/twilio/smsmarketing/TwilioServlet.java'
  data-highlight='61-71')
  :markdown
    ## Manage Subscriptions

    We want to provide the user with two SMS commands to manage their
    subscription status: `add` and `remove`.  These commands will
    toggle a boolean flag for their `Subscriber` record in the database and
    will determine whether or not they want to receive messages from our
    marketing campaign. Because we want to respect our user's preferences,
    we don't opt them in automatically - rather, we have them confirm that
    they want to receive our messages.

    To make this happen, we will need to update the controller logic which
    handles the incoming text message to do a couple things:

    * If it is a `add` or `remove` command, create/update their subscription
    with the right status in the database.

    * If it is a command we don't recognize, send them a message explaining
    available commands.

.step(
  data-title='Sending Notifications',
  data-file='src/main/java/org/twilio/smsmarketing/NotificationsServlet.java'
  data-highlight='36-54')
  :markdown
    ## Sending Notifications

    On the server, we grab the message text and/or image URL, then loop through all
    Subscribers and call the method `send` on our `Sender` domain object to send
    the message.

    When the messages are on their way, we render back the index page with a
    success message.

.step(
  data-title='Send SMS or MMS Notifications',
  data-file='src/main/java/org/twilio/smsmarketing/lib/Sender.java'
   data-highlight='13-43')
  :markdown
    ## Send SMS or MMS Notifications

    When the model object is loaded, it creates a [Twilio REST API
    client](https://github.com/twilio/twilio-java) that can be used to send SMS
    and MMS messages. The client requires your Twilio account credentials (an account
    SID and auth token), which can be found [in the account portal](/user/account).

    Next all we need to do is `create` a message. The Twilio Message API call requires
    a `From`, `To` and `Body` parameters. The `MediaUrl` is optional.

    **See Also**
    * [Twilio SMS and MMS Java Quickstart](//www.twilio.com/docs/quickstart/java/sms)

.step(data-title='Where to Next?')
  :markdown
    ## Where to Next?

    That's it! We've just implemented a an opt-in process and an administrative
    interface to run an SMS and MMS marketing campaign. Now all you need is
    killer content to share with your users via text or MMS.

    If you're a Java Servlet developer working with Twilio, you might enjoy these
    other tutorials:

    [**SMS and MMS notifications**](//www.twilio.com/docs/tutorials/walkthrough/server-notifications/java/servlets)

    Implement server-side SMS notifications

    ### Did this help?

    Thanks for checking this tutorial out! If you have any feedback
    to share with us, we'd love to hear it.
    [Contact the Twilio Developer Education Team](mailto:deved-oss@twilio.com) to let us know what you think.
